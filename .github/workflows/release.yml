name: Build, Version Bump, and Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'cmdc/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '!README.md'
      - '!.gitignore'
      - '!.pre-commit-config.yaml'
      - '!tests/**'
      - '!.github/**'

permissions:
  contents: write

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python and Poetry
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          python_version: "3.12"

      - name: Bump version using Commitizen
        run: poetry run cz bump --yes --annotated-tag
        env:
          CI: true

      - name: Get new version
        id: get_version
        run: |
          NEW_VERSION=$(poetry version | awk '{print $2}')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: poetry build

      - name: Commit version bump changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.get_version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git push origin main --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.new_version }}
          name: "Release ${{ steps.get_version.outputs.new_version }}"
          body: |
            Changelog has been generated automatically.
          draft: false
          prerelease: false
          files: |
            ./dist/*
